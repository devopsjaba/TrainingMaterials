1. 테스트 코드
    1) 소프트웨어 기능과 동작을 테스트하는데 사용되는 코드 
    2) 개발자가 요구사항에 맞게 개발한 기능이 의도대로 정확히 동작하는지 검증하는 절차를
       코드화 해놓은 것 

2. 테스트 코드를 왜 작성하는가?
    1) 신규 기능 개발 과정 중 예상하지 못했던 문제를 미리 발견할 수 있음 
    2) 작성한 코드가 의도한 대로 동작하는지 검증 
    3) 코드 수정이 필요한 상황에서 유연하게 안정적인 대응 가능        

3. 테스트의 종류 
    1) 크게 3가지로 구분 
        - UI 
        - Service (Intergration)
        - Unit Test     

    2) Unit Test (단위 테스트)
        - 가장 작은 단위로 기능을 나누어 테스트하는 기법 
        - 애플리이션을 구성하는 객체의 기능(메서드)을 의미함 
        - 작은 단위로 쪼갠 하나의 메서드가 올바르게 동작하는지 독립적인 테스트
        - 장점
            - 빠르고 쉽게 테스트 가능 
        - 단점 
            - 객체는 객체 간의 협력을 통해서 기능을 완성 시킴 
            - 단위 테스트 코드 작성 시, 객체 간 의존성 문제를 해결해야 하는 불편함이 있음. 

    3) 통합(Intergration) 테스트 

4. TDD (Test-Driven-Development)
    1) 테스트 주도 개발 
    2) 실패하는 테스트 코드로 시작해서 리팩토링으로 종료되는 일련의 스프린트 방식을 
       여러 번 거쳐서 요구사항 충족하는 코드를 완성시키는 개발 방법론.

5. TDD 기반 테스트 코드 작성하기 
    1) 암호 검사기 
        - 사용자가 입력한 문자열을 검사해서 정해져 규칙을 적용한 수준에 따라 
          "약함", "보통", "강함"으로 결과 값을 반환 
    2) 암호 검사기 규칙
        - 길이가 8글자 이상 
        - 0부터 9 사이의 숫자 포함 
        - 대문자 포함 
    3) 암호 검사기 평가 기준 
        - 3가지 규칙 모두 충족하면 암호는 강함
        - 2개의 규칙 충족하면 암호는 보통
        - 1개 이하 규칙 충족하면 암호는 약함 

6. jUnit 개요
    1) Java에서 독립된 단위테스트(Unit Test)를 지원해주는 프레임워크
    2) 단위테스트를 쉽게 해주는 테스트 지원 프레임워크

7. 단위테스트(Unit Test)
    1) 소스 코드의 특정 모듈이 의도된 대로 정확히 작동되는지 검증하는 절차 
    2) 모든 함수와 메소드에 대한 테스트 케이스(Test case)를 작성하는 절차 

8. jUnit의 특징 
    1) 단정(assert) 메서드로 테스트 케이스의 수행 결과를 판별함 
        - assertEquals(예상 값, 실제 값)
    2) jUnit4부터는 테스트 지원하는 애노테이션 제공
        - @Test 
    3) 각 @Test 메서드가 호출할 때마다 새로운 인스턴스를 생성하여 독립적인 테스트가 이루어짐 

9. jUnit 라이브러리 설치
    1) jUnit 4.12 이상 버전을 pom.xml에 추가함 

10. jUnit에서 테스트 지원하는 애노테이션
    1) @Test
        - @Test가 선언된 메서드는 테스트를 수행하는 메소드가 됨 
        - jUnit은 각각의 테스트가 서로 영향을 주지 않고 독립적으로 실행됨 
            - @Test마다 객체를 생성함 
    2) @RunWith(SpringJUnit4ClassRunner.class) 
        - jUnit 프레임워크의 테스트 실행방법을 확장할 때 사용하는 애노테이션
        - SpringJUnit4ClassRunner라는 클래스 지정 
            - jUnit 테스트를 진행하는 중에 ApplicationContext를 만들고 관리하는 
              작업을 진행해 줌 
    3) @ContextConfiguration
        - 스프링 빈(Bean) 설정 파일의 위치를 지정할 때 사용되는 애노테이션
    4) @Autowired
        - 스프링 DI에서 사용되는 특별한 애노테이션
        - 해당 변수에 자동으로 빈(Bean)을 매핑해 줌 

11. 테스트 결과를 확인하는 단정(assert) 메서드 
    1) assertEquals(a, b)
        - 객체 a와 객체 b가 일치함을 확인함 
    2) assertArrayEquals(a, b)                                                                                     
        - 배열 a와 b가 일치함을 확인함 
    3) assertTrue(a)
        - 조건 a가 참인가를 확인함 
    4) assertNotNull(a)
        - 객체 a가 null이 아님을 확인함                 
