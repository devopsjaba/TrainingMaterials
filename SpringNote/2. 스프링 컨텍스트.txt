1. 컨텍스트 (context)
    1) 프레임워크가 관리할 모든 객체 인스턴스를 추가하는 앱의 메모리 공간임.
    2) 스프링은 애플리케이션에서 정의한 어떤 객체도 알지 못함 
    3) 스프링이 객체를 볼 수 있게 하려면 컨텍스트에 객체를 추가해야 함.

2. 메이븐 프로젝트 생성 
    1) 앱의 빌드 프로세스를 쉽게 관리하는 데 사용하는 도구 
    2) 스프링 프로젝트에 가장 많이 사용되는 빌드 도구 
    3) 앱에 필요한 의존성 내려 받기         
    4) Advanced Settings
        - 그룹 ID : 그룹화하는 데 사용
        - 아티팩트 ID : 현재 애플리케이션 이름
    5) 프로젝트 생성 후 표시된 구조 
        - src 폴더 : 소스 폴더 
            - main 폴더
                - 애플리케이션 소스 코드 
                - 자바 코드와 구성 정보 => java, resources 하위 폴더 포함 
            - test 폴더 
                - 단위 테스트의 소스 코드 
        - pom.xml 
            - 새 종속성 추가 
            - 메이븐 프로젝트 구성을 작성하는 파일 
            - 의존성 추가하면 IDE가 종속성을 내려받아 External Libraries 폴더
              에서 추가된 의존성 찾을 수 있음.        

3. 스프링 컨텍스트에 새로운 빈(bean) 추가

    1) @Bean 애너테이션 사용하여 스프링 컨텍스트에 빈(객체) 추가  


         스프링 컨텍스트 
         -----------------------------
         |                           |
         |                           |    처음에는 스프링 켄텍스트가 비어있음
         |                           |    나중에 Parrot 인스턴스를 켄텍스트로 이동함  
         |                           |    ==> 스프링이 이를 관리할수 있도록 함 
         |                           |
         |   Parrot 타입의 객체       |      
         |                           |
         -----------------------------

        - @Configuration 애너테이션이 지정된 프로젝트 구성 클래스 정의        
            - 스프링의 켄텍스트를 구성하는 데 사용할 구성 클래스 

            - 컨텍스트에 추가하려는 객체 인스턴스를 반환하는 메서드 추가
                - @Bean 애너테이션으로 메서드에 주석 추가함 




         스프링 컨텍스트 
         -----------------------------
         |                           |
         |   10                      |    
         |                           |     
         |   Hello                   |    
         |                           |
         |   Parrot 타입의 객체       |      
         |                           |
         -----------------------------      

        - 스프링 켄텍스에 동일한 타입의 빈 여러 개 추가하기  
            - @Bean 
                - 빈에 다른 이름을 지정하려면 이름(name) 또는 값(value) 중 하나를 사용함 
                    - @Bean(name="love")
                    - @Bean(value="love")
                    - @Bean("love")


    2) 스테레오타입 애너테이션으로 스프링 켄텍스트에 빈 추가 
        - @Component
            - 가장 기본적인 애너테이션임 
            - 클래스를 컴포넌트로 표시함 
                - 스프링 컨텍스트에 추가해야 할 인스턴스의 클래스위에 이 애너테이션을 추가함.

        - 앱이 스프링 켄텍스트를 생성하면 스프링은 컴포넌트로 표시된 클래스의 인스턴스를 생성하고
          해당 인스턴스를 켄텍스트에 추가함.

        - 스테레오타입 애너테이션으로 지정된 클래스를 찾을 위치를 스프링에 알려 주는 구성 클래스가 필요.
            - @ComponentScan           

         
         -

         스프링 컨텍스트                            
         -----------------------------
         |                           |      1) 1단계 
         |                           |          @Component
         |                           |           public class Parrot{
         |                           |
         |                           |           }
         |                           |          - 스프링이 켄텍스트에 이 클래스의   
         |                           |            인스턴스를 추가하도록 지시함 
         |                           |    
         |                           |
         |   Parrot 타입의 객체       |      2) 2단계 
         |                           |
         -----------------------------        
                                              @Configuration
                                              @ComponentScan  
                                              public class ProjectConfig {

                                              }
                                              - 스프링이 스테레오타입 애너테이션이
                                                지정된 클래스를 찾도록 지시함   

        - 스프링에 아래사항을 지정함
            - 컨텍스트에 추가할 인스턴스의 클래스 (Parrot)
            - 이런 클래스를 찾을 수 있는 취치 (@ComponentScan 사용)


    3) 스프링 켄텍스트에 빈을 추가할 때 두가지 방법 비교 

           @Bean 애너테이션 사용                        스테레오타입 애너테이션 사용
       ----------------------------------------------------------------------------------------
        -  스프링 켄텍스트에 추가할 인스턴스의           - 스프링 프레임워크이 인스턴스를 생성한 후에만  
           생성을 완전히 제어할수 있음.                   인스턴스를 제어할수 있음.
        -  @Bean이 달린 메서드 안에서                   - 켄텍스트에 클래스의 인스턴스를 하나만    
           인스턴스를 생성하고, 구성하는 것이             추가 할수 있음
           사용자 책임임.
        - 스프링은 해당 인스턴스만 받아                 - 애플리케이션이 소유한 클래스의 빈을 
          켄택스트에 그대로 추가함                        생성하는 데만 사용 가능함.

        - 이 메서드를 사용하면 동일한 타입의
          인스턴스를 스프링 켄텍스트에 더 추가할 
          수 있음.

        - 인스턴스를 정의한 클래스가 앱내에서
          정의되지 않아도 추가 가능함.
          - 스프링 켄텍스트에 String과 Integer
            타입을 추가함   

    4) 인스턴스 생성 후 관리하기 
        - 스테레오타입 애너테이션을 사용하면 스프링이 빈을 생성하고
          해당 켄텍스트에 추가하도록 지시함 
        - 스프링이 빈을 생성한 직후에 몇가지 명령을 실행하려면 
          PostConstruct 애너테이션을 사용함   

4. 요약 
  1) 스프링 켄텍스트(context)에 객체 인스턴스(빈)를 추가하는 것 
  2) 스프링 켄텍스트(context)
    - 스프링이 관리하기 원하는 인스턴스를 담을 바구니 
    - 스프링은 개발자가 컨텍스트에 추가한 인스턴스만 볼수 있음.
  3) 스프링 컨텍스트에 빈을 추가하는 방법
    - @Bean 애너테이션 
    - 스테레오타입 애너테이션   