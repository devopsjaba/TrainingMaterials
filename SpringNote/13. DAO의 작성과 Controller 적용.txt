1. DAO (Data Access Object)
    1) 데이터(data)에 접근(access)하기 위한 객체(object)
    2) Database에 저장된 데이터를 읽기, 쓰기, 삭제, 변경을 수행 
    3) DB 테이블당 하나의 DAO를 작성 

        LoginContoller  --------> UserDao  -------> DB 
                        <-------           <-------
          userDao                   ds                
          loginForm()            selectUser(String str)   
          login()                insertUser(User u)
          logout()               deleteUser(String s)
          loginCheck()           updateUser(User u)         
                                 deleteAll()
                                    
        RegisterController 
            userDao 
          register()
          save()
          loginCheck()        

2. 데이터의 변환과 검증 
    1) 스프링 제공하는 커스텀 태그 라이브러리 사용 
        - <%@  taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
        - <form> 대신 <form:form> 사용 
            - 폼을 더욱 효과적으로 처리할 수 있음
            - 폼 입력값 바인딩, 에러 메시지 표시, 폼 검증 등을 용이하게 해줌.

        - <form:form modelAttribute="user">
            - action 속성 : 자동으로 현재 URL을 폼의 액션으로 설정해 줌 
                - 기본적으로 폼을 submit할 때 현재 페이지의 주소를 사용함.    
            - 모델 바인딩
                - modelAttribute 속성을 통해 모델 객체에 폼 데이터를 자동으로 바인딩함 
                - 폼 데이터를 서버로 전송할 때 컨트롤러에서 해당 데이터를 즉시 사용할수 있음.                         
                     ||
                     \/
          <form id="user" action="<c:url value="/register/add" />" method="post">  
        - <form:errors>로 에러를 출력      

    2) Validator 인터페이스를 이용한 검증          
        - supports()
        - validate()
        - 컨트롤러에서 사용 
            - 'WebDataBinder'를 통해 사용자가 구현한 Validator를 추가하고,
              요청 데이터에 대해 검증을 실행함 
        - 검증 실행
            - 컨트롤러 메서드에서 'BindingResult'를 파라미터를 받아서,
              검증 후 결과를 확인하고 저장 및 처리함  

    3) MessageSource
        - 리소스에서 메시지를 읽기 위한 인터페이스 
            - 파일, 배열 
        - ResourceBundleMessageSource 등록
            - 프로퍼티 파일을 메시지 소스로 사용                                                                  