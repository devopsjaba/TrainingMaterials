1. 관심사의 분리 (Separation of Concerns)
    1) 원칙 
        - OOP 5대 설계 원칙 (SOLID) 
            - SRP (단일 책임 원칙)
    2) 분리 
        - 관심사 분리
        - 공통 코드 분리         
            - 입력 부분 
                - request 객체로 매개변수를 받지 않고, 직접 값을 받을 수도 있음.
                    - spring이 자동 변환 함 (string => int)

2. 스프링 웹 애플리케이션 (스택)
    1) 서블릿 스택                    
        - 스프링 웹
        - Spring Containers
        - Spring API 
        - Spring Secutiry
        - Spring MVC 
    2) 리액티브 스택   

3. Spring MVC 
    1) 스프링 프레임워크를 구성하는 모듈, 정식 명칭은 Spring Web MVC. 
    2) 서블릿 API 기반으로 작성된 웹 프레임워크(Web Framework)임.
    3) 프론트 컨트롤러 패턴과 MVC 아키텍쳐 패턴을 사용함
    4) 유연하고 확장성이 뛰어난 구조를 제공함
    5) 견고한 웹 애플리이션을 만든는데 도움이 되는 풍부한 기능 제공함 
    6) 자바 언어의 애노테이션(Annotation)과 리플랙션(Reflection) API 적극 사용함 
    7) 애노테이션 기반 프로그래밍 모델(annotation-based Programming)을 제공함
    8) 경량 함수형 프로그래밍 모듈을 지원함 

4. 스프링 MVC의 요청/응답 처리 흐름 
    1) 클라이언트에서 요청이 들어옴
    2) DispatcherServlet에서 new Model()로 모델 생성해서 Contoller로 전달.
    3) Controller에서 매개변수로 Map의 형태인 Model을 받음.   
    4) 유효성 검사를 통과하면 처리 및 Model에 작업 결과를 저장 
    5) 작업 결과를 보여줄 View의 이름을 String 으로 DispatcherServlet에 반환
    6) DispatcherServlet에서 반환된 View의 이름을 찾아서 Model을 전달
    7) 해당 View에서 클라이언트로 응답을 보냄   

5. MVC 아키텍쳐 패턴 
    1) 로직과 프리젠테이션을 분리 
    2) 화면의 구성요소와 데이터를 담은 모델 (Model)
    3) 화면 출력 로직을 담은 뷰 (View)
    4) 애플리케이션 제어 로직을 담은 컨트롤러 (Controller)

6. 프론트 컨트롤러(Front Controller) 패턴
    1) 컨트롤러를 대표해서 모든 요청과 응답을 대응함 
    2) 적절한 하위 컨트롤러에게 작업 위임, 뷰 선택 및 결과를 출력함    

7. 애노테이션 기반 프로그래밍 모델(annotation-based Programming)
    1) @Controller, @RequestMapping 등 다양한 애노테이션 제공함 
    2) 애노테이션을 통해 요청 연결, 데이터 가공, 예외 처리 등 구성함 
    3) 애노테이션
        - 코드의 메타-데이터(Metadata)로 작성, 컴파일 또는 런타임에 활용함 
        - JDK가 제공하는 빌트인(built-in)과 직접 작성하는 커스텀으로 분류함 
        - 패키지, 클래스, 메소드, 필드에 선언 할 수 있음 
        - @AnnotationName으로 표기함      




