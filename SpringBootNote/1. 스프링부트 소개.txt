1. Spring Framework 역사
    1) 2002년 로드 존슨(Rod Johnson)이 집필한 "J2EE Development without EJB"에서 소개됨 
    2) 2004년 스프링 1.0 릴리즈 
        - 종속성 주입, IoC 컨테이너 및 AOP 기능을 갖춘 경량 프레임워크 도입함 
    3) 2006년 스프링 2.0
    4) 2009년 스프링 3.0
    5) 2013년 스프링 4.0
    6) 2014년 스프링 부트 1.0 릴리즈 
    7) 2017년 스프링 5.0, 스프링 부트 2.0 릴리즈 
    8) 2022년 스프링 부트 3.0 릴리즈 
    9) 2024년 현재 개발 (SF: 6.1, SB: 3.3)    

2. 프레임워크 (소프트웨어 관점)
    1) 애플리케이션의 골격에 해당하는 아키텍처를 제공     
    2) 프레임워크 기반의 애플리케이션을 개발하면 개발자는 비즈니스 로직에 집중할수 있음 
    3) 프레임워크 사용 이유
        - 개발 시간이 단축됨
        - 생산 단가 낮출수 있음 
        - 개발은 쉬워짐, 생산성이 좋아짐 

3. 스프링 부트의 등장
    1) Spring Framework
        - 웹 애플리케이션 
        - 보안
        - 클라우드         
        - ...
        - 개발자가 필요로 하는 대부분의 기능 지원 

    2) Spring boot
        - 스프링의 서브 프로젝트 
        - SF에서 개발자가 처리해야 하는 설정이 많아 짐
            - Spring Framework 구성의 복잡성 
        - SF에서 라이브러리(API) 의존성이 복잡함 
        - SF의 이해도 : 많은 시간과 노력이 요구됨 
        - 스프링 접근성 개선 (2014 도입)
        - 스프링과 달리 웹 애플리케이션을 목적으로 함 

4. Spring Boot의 접근 방식 
    1) 애플리케이션을 자동으로 설정하고 구성함 
        - spring-boot-starter-web 
        - spring-boot-starter-data-jpa 와 같은 종속성은 웹 서버와 JPA를 자동으로 구성  
    2) 톰캣(Tomcat) 같은 내장 서버를 통해 서버와 관련된 복잡한 설정들 제거함 
    3) 유연하고 외부화된 구성 관리 허용
        - Properties이나 YAML 파일은 구성을 구성하는 데 사용됨     

5. Spring 초기화 introduction
    1) Spring initializr를 이용한 프로젝트 만들기 
        - https://start.spring.io/ 

    2) 스프링 부트 프로젝트 구조 
        - 소스 폴더 
            - src/main/java 
                - 일반적인 자바 클래스 작성
            - src/main/resources
                - 자바가 아닌 파일 작성 
                - static 폴더 
                    - 이미지, js, css 같은 정적인 웹 컨텐츠 저장 
                - templates 폴더 
                    - 타임리프(Thymleaf)같은 템플릿 기반의 웹 리소스 저장 
                - application.properties
                    - 프로젝트 전체에서 사용할 프로퍼티 정보 저장                     

            - src/test/java 
                - Junit 기반의 테스트 코드 작성       

    3) 스프링 부트 애플리케이션 실행하기 
        - 웹 애플리케이션 실행 
            - 기본적으로 웹 애플리케이션으로 실행됨
            - 내장톰캣이 8080 포트로 구동됨 
        - 자바 소스를 이용하여 배너 제거 
        - 외부 프로퍼티 이용하기 
            - application.properties 파일 작성 
                - 외부 프로퍼티로 분리시킴으로써 자바 소스 수정을 최소화 함 
                - 애플리케이션의 환경 관리하는 설정 파일 
        - 프로퍼티 적용 순서
            - 프로퍼티 설정은 자바 소스보다 우선순위가 높음 
                - 자바 소스에서 WebApplicationType을 SERVLET으로 설정해도
                  properties에서 none으로 설정하면 자바 애플리케이션으로 동작함 
        - properties, yaml 설정 파일 
            - yaml 
                - 야믈 
                - XML이나 JSON과 마찬가지로 데이터의 의미와 구조를 쉽게 전달하기 위한 파일 
                    - 보다 쉽게 작성할수 있고 가독성이 뛰어남                            

