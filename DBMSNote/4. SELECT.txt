0. sakila 데이터베이스의 customer 테이블 
    1) 'customer_id'
        - 이 테이블에서 고객을 고유하게 식별하는 데 사용하는 기본키
    2) 'store_id'
        - store 테이블에서 고객을 식별하는 외래키   
    3) 'first_name'
        - 고객의 이름이 저장되어 있는 열 
    4) 'last_name' 
        - 고객의 성이 저장되어 있는 열 
    5) 'email'
        - 고객의 이메일 주소가 저장되어 있는 열 
    6) 'address_id'
        - address 테이블에서 고객의 주소를 식별하는 외래키 
    7) 'active'
        - 고객이 활성화된 고객인지 여부가 저장되어 있는 열 
    8) 'create_date'
        - 고객이 시스템에 추가된 날짜가 저장되어 있는 열 
    9) 'last_update'
        - 행이 수정되었거나 가장 최근에 업데이트된 시간이
          저장되어 있는 열                                         


1. SELECT 문으로 열 조회하기 
    1) 기본 형식
        - SELECT [열] FROM [테이블]
    2) 하나의 열 조회하기
    3) 2개 이상의 열 조회하기 
    4) 전체 열 조회하기 

2. where 문으로 조건에 맞는 데이터 조회하기  
    1) 기본 형식
        - SELECT [열] FROM [테이블] where [열] = [조건값]  
    2) where문으로 특정 값 조회하기 
        - = 연산자로 특정 값 조회         
        - 비교 연산자 
            - <>, !=
            - !<
            - !>
        - 논리 연산자 
            - between 
                - 범위에 있으면 데이터를 조회     
                - 두 경계값을 포함하여 검색을 수행함 
                    - 시작 값과 끝 값이 포함됨
            - AND, OR
            - IN 
                - 리스트 중 하나라도 포함되어 있으면 데이터를 조회          

3. Null 값
    1) NULL 이란 해당 컬럼의 값이 없다는 의미 (NULL 값을 허용하는 경우)
        - 데이터가 없는 상태
        - 숫자 0, 공백이 아니라 아예 정의되지 않은 값 
    2) NULL 값을 가지고 있는 컬럼을 검색하려면 is NULL 
    3) NULL이 아닌 값을 가지고 있는 컬럼을 검색하려면 is not NULL 

4. ORDER BY 문으로 데이터 정렬
    1) 형식
        - SELECT [열] FROM [테이블] WHERE [열] = [조건값] ORDER BY [열] [ASC 또는 DESC]
    2) 2개 이상의 열을 기준으로 정렬하기
        - 쉼표를 사용하여 열 이름 나열하면 됨
        - 열 입력 순서에 따라 정렬 우선순위가 정해짐  
    3) ASC로 데이터 정렬하기
    4) DESC로 데이터 정렬하기
    5) LIMIT으로 상위 데이터 조회하기 
        - LIMIT문에 매개변수 1개만 입력
        - 지정된 열에서 상위 N개만 조회함 
    6) 범위를 지정해 데이터 조회하기      
        - LIMIT문에 매개변수 2개를 입력
        - 예
            - LIMIT N1, N2
                ==> 상위 N1 다음행부터 N2개의 행을 조회함        
    7) OFFSET으로 특정 구간의 데이터 조회하기 
        - ORDER BY로 데이터 정렬한 다음, 상위나 하위가 아닌 특정 구간의 데이터를 조회
          해야 하는 경우에 사용.
        - OFFSET에 지정한 행 개수만큼 건너뛰고 출력함           
        - OFFSET은 반드시 LIMIT 문을 함께 사용해야 함         


5. LIKE 
    1) 일부 키워드만으로 조회하는 경우가 많음 
    2) LIKE는 와일드 카드로 지정한 패턴과 일치하는 문자열, 날짜, 시간 등을 조회함 
    3) 기본 형식
        SELECT[열] FROM [테이블] WHERE [열] LIKE [조건값]    
    4) %로 특정 문자열을 포함하는 데이터 조회
        - 0~n글자
        - 예)
            - A% : A로 시작하는 모든 문자열 
            - %A : A로 끝나는 모든 문자열 
            - %A% : A가 포함된 모든 문자열 
    5) _ : 1글자
       __ : 2글자 

6. 정규 표현식(regular expression, REGEXP)으로 데이터 조회하기 
    1) 정규 표현식은 특정한 패턴의 문자열을 표현하기 위해 사용함 
    2) 표현식
        .           임의의 한 문자(줄바꿈 문자는 제외함)
        *           해당 문자 패턴이 0번 이상 반복함 
        +           해당 문자 패턴이 1번 이상 반복함 
        ^           문자열의 처음을 의미함 
        $           문자열의 끝을 의미함 
        |           OR를 의미함 
      [...]         대괄호안에 있는 어떠한 문자를 의미함 
      [^...]        대괄호안에 있지 않은 어떠한 문자를 의미함 
       {n}          반복되는 횟수를 지정함
       {m,n}        반복되는 횟수의 최소값과 최대값을 지정함


7. GROUP BY 문과 HAVING문
    1) 형식
        SELECT [열] 
        FROM [테이블] 
        WHERE [열] = [조건값]
        GROUP BY [열]                       -- 특정 열의 데이터를 그룹화함
        HAVING [열] = [조건값]               -- WHERE와 비슷한 역할함, 그룹화된 데이터를 필터링 
    
    2) 2개 이상의 열을 기준으로 그룹화하기 
    3) count()로 그룹화한 열의 개수 세기 
        - GROUP BY문은 집계함수와 함께 사용하는 경우가 많음.
        - count(*)
            - 모든 행의 개수를 샘
    4) HAVING문
        - 그룹화한 데이터 필터링하기   

8. distinct 문
    1) 중복된 데이터 제거하기                  
    2) 형식
        select distinct [열] from [테이블]        


















