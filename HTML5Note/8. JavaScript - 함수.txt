1. 함수 선언, 호출 
    1) function 함수명() {
        명령들
       }
    2) 함수명()   

    3) 매개변수 

    4) return문 

    5) 기본 매개변수 

2. 변수의 유효 범위, 스코프 
    1) 지역 스코프 (local scope)
        - var 예약어 사용해서 변수 선언하면 해당 변수는 함수 스코프를 가짐.
    2) 전역 스코프 (global scope)    
    3) 블록({}) 스코프
        - let과 const를 사용해 만든 변수(블록 변수)는 기본적으로 
          변수가 선언된 블록 안에서만 유효함
    4) 자바스크립트 변수 사용
        - var 변수보다 let, const 변수를 사용함
        - 전역 변수는 최소한으로 사용함 
        - 객체 선언은 const을 사용함 
            - 프로그래밍 도중 객체 자체가 바뀌지 않도록 함            

3. 익명 함수
    1) 변수에 할당해서 사용하는 익명 함수 
        let sum = function(a, b) {
            return a + b;
        }

        console.log(`함수 실행 결과 : ${sum} `)
        
    2) 자바스크립트 함수를 1급 시민(first-class) 또는 1급 함수라고 함. 
        - 익명 함수를 선언하는 이유는 변수처럼 사용하기 위함.(변수에 할당)
        - 다른 함수의 인자로 사용할 수 있어야 함
        - 다른 함수에서 반환값으로 반환 할 수 있어야 함 

    3) 즉시 실행 함수 
        - 한 번만 실행하는 함수일 경우 
          함수 정의하면서 동시에 실행할 수도 있음 
        - (function() {

          })();  

        - (function(매개변수) {

          })(인수);                          
             
4. 화살표 함수 (arrow function)
    1) =>을 사용해 함수를 좀 더 간단하게 선언 
    2) 형식
        - (매개변수) => {함수 내용}
    3) 매개변수가 없을 때 소괄호 생략 가능
    4) 함수에서 실행할 명령이 한 줄뿐이면 중괄호 생략 가능 
    5) 한 줄 명령에 return문이 포함되어 있다면 return 생략 가능 
    6) 예
        let hi = function() {
            return `안녕하세요.`;
        }
        hi();
                              ||
                              \/

        let hi = () => {return `안녕하세요.`}; 
        hi();

                              ||
                              \/

        let hi = () => `안녕하세요.`;
        hi();

    7) 예 - 매개변수가 1개일 때 
        let hi = function(user) {
            console.log(`${user}님, 안녕하세요.`);
        }
        hi(홍길동)
                              ||
                              \/

        let hi = user => console.log(`${user}님, 안녕하세요.`);
        hi(홍길동)

    8) 예 - 매개변수가 2개 이상일 때         
        let sum = function(a, b) {
           return a + b;
        }
        sum(10, 20);
                              ||
                              \/        
        let sum = (a, b) => a + b;
        sum(10, 20);                              

5. 콜백 함수 (callback function)
    1) 다른 함수의 인수로 사용하는 함수를 가리킴
    2) 함수 이름 사용해 콜백 함수 실행하기
        - addEventListener()
    3) 함수에 직접 작성해서 콜백 함수 실행하기 

6. 함수에서 다른 함수 반환하기 

7. 전개 구문 
    1) 값을 펼쳐 주는 구문 
    2) 3개의 마침표를 이용해 '...' 기호를 사용함 
        - 오로지 배열에 있는 값만 꺼내 펼쳐서 보여 줌 
    3) 함수를 선언할 때 사용할 수 있음         

8. 나머지 매개변수 
    1) 함수를 선언하면서 나중에 몇 개의 인수를 받게 될지 알 수 없는 경우
        - 이때 전개 구문을 사용해서 매개변수를 정의함 
        - 이것을 나머지 매개변수라고 함.
    2) 예 
        function addNum(a, b) {
            return a + b; 
        }        

        addNum(1, 3)            //4
        addNum(1, 3, 5, 7)      //4

9. 타이머 함수 (timer function)
    1) 특정 시간이 되었을 때 함수를 실행,
       특정 시간 동안 함수를 반복하기 위해서 시간을 재는 함수
    2) setInterval()
        - 일정 시간마다 콜백 함수를 반복하기 
        - 형식
            - setInterval(콜백함수, 시간)    
    3) clearInternal()
        - 반복 실행 멈추기 
        - 타이머를 종료하는 함수 
        - 형식
            - clearInternal(타이머)

    4) setTimeout()
        - 지정한 시간이 지난 후에 콜백 함수를 실행함     
        - 형식
            - setTimeout(콜백 함수, 시간)        


