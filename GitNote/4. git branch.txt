1. 브랜치란?
    1) 모든 버전 관리 시스템에는 브랜치(branch)라는 개념이 있음
    2) 브랜치 원의미는 나뭇가지임

2. 브랜치가 필요한 이유 
    1) 예) 제품 사용 설명서
        - A -> B -> C -> D 

        - ms  A -> B -> C -> D -> ME 
        - google A -> B -> C -> D -> GE -> GF -> GH 
        - apple A -> B -> C -> D -> AE 
        - main A -> B -> C -> D -> E 


        - ms  A -> B -> C -> D -> ME 
        - google A -> B -> C -> D -> GE -> GF -> GH 
        - apple A -> B -> C -> D -> AE -> AF 
        - main A -> B -> C -> D -> E         

3. main 브랜치 (master 브랜치)
    1) 깃으로 버전 관리를 시작하면 기본적으로 main이라는 브랜치가 만들어짐 
    2) https://android.googlesource.com/

4. 브랜치 기능 
    1) 사용자가 커밋할 때마다 main 브랜치는 어떤 게 최신 커밋인지 정보를 가짐.
    2) 브랜치는 커밋을 가리키는 포인터와 비슷함 

         A                                  a1------>a2
                                 (분기)   
        main       C1 -------> C2 ----------------------->C3     
                                        (분기)  
         B                                           b1

5. 브랜치 만들기 
    1) 새 디렉토리 생성
        - mkdir manual         
    2) 깃 저장소로 만들기 
        - git init
    3) 새 브랜치 만들기 
        - git brach 브랜치명 
    4) 브랜치 전환하기 
        - git checkout 브랜치명
        - git switch 브랜치명 
    5) 브랜치마다 최신 커밋 확인
        - git log --oneline --branches
    6) 브랜치와 커밋 관계를 그래프 형태로 표시하기 
        - git log --oneline --branches --graph       
    7) 브랜치 사이의 차이점 살펴보기
        - git log 명령어에서 브랜치 이름 사이에 마침표 2개(..)을 
          넣는 명령어 
        - 공백 없이 입력함 
        - 마침표 왼쪽에 있는 브랜치를 기준으로 오른쪽 브랜치를 비교함 
        - git log main..apple        
            - main브랜치에는 없고 apple 브랜치에만 있는 커밋을 보여줌 
        - git log apple..main
            - apple브랜치에는 없고 main 브랜치에만 있는 커밋을 보여줌             

6. 브랜치 병합(merge)하기 
    1) 서로 다른 파일 병합하기 

        