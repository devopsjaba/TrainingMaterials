1. 디렉터리 생성하기
    - mkdir 
        - 마침표가 하나인 항목(.)
            - 현재 디렉터리를 나타냄 
        - 마침표가 2개인 항목(..)
            - 상위 디렉터리를 나타냄     

2. 현재 디렉토리에서 깃을 사용 할 수 있도록 초기화하기
    - git init 

3. 깃에서 버전의 의미 
    1) 작업 트리(working tree = working directory)
        - 파일 수정, 저장 등의 작업을 하는 디렉터리  
        - 예) 파일 10개 수정

    2) 스테이지 (stage = staging area)
        - 버전으로 만들 파일이 대기하는 곳임 
        - 눈에 보이지 않음
            - 깃을 초기화했을 때 만들어지는 .git 디렉토리안에 숨은 파일 
              형태로 존재하는 영역
        - 예) 4개만 버전으로 만들려면 이 파일 4개만 스테이지로 넘져주면 됨.

    3) 저장소 (repository)
        - 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳.   
        - 눈에 보이지 않음     
            - 깃을 초기화했을 때 만들어지는 .git 디렉토리안에 숨은 파일 
              형태로 존재하는 영역

    4) 예 

            작업 트리           스테이지            저장소                               
                                hello.txt  
                                                  

4. 깃의 상태를 보여 주는 명령어 
    1) git status
        - On branch main : 현재 main 브랜치에 있음 
        - No commits yet : 아직 커밋한 파일이 없음
        - nothing to commit : 현재 커밋할 파일이 없음  

5. 수정한 파일을 스테이지에 올리기 
    1) git add  
        - 깃에게 버전 만들 준비를 하라고 알려 주는 것 
        - 스테이징(staging) 또는 스테이지에 올린다라고 표현함 

6. 스테이징한 파일 커밋하기 
    1) git commit 
        - 버전 만드는 것을 깃에서는 커밋(commit) 한다라고 함 
        - -m 옵션 붙이고 저장할 메시지를 적음   

7. 스테이징과 커밋 한꺼번에 처리하기                                                                          
    1) git commit -am
        - 수정한 내용을 스테이지에 올리는 동시에 커밋까지 처리함 
        - -am 옵션을 사용하면 스테이징과 커밋을 한꺼번에 처리함 
        - 한번이라도 커밋 한 적이 있는 파일을 다시 커밋할 때만 사용가능
        - ex) git commit -am "message2"

7-1. 방금 커밋한 메시지 수정하기 
    1) 커밋을 만들자마자 즉시 수정할수 있음 
    2) 최근 커밋 메시지를 수정 
    3) git commit --amend
        - 덮어쓰기 위한 옵션         

8. 커밋 기록 자세히 살표보기 
    1) git log 

         커밋 해시(commit hash) : 커밋을 구별하는 아이디   가장 최신 표시
        -----------------------------------------------  ------------
        commit 34fc0893c00fbcb7115bbadcb1dd1c205d637242 (HEAD -> main)
        Author: devopsjaba <devopsjaba@gmail.com>
        Date:   Tue May 14 16:24:28 2024 +0900

            message2

        - 커밋 해시는 커밋 ID라고도 함      

    2) git log --stat 
        - statics(통계) 줄임말        
        - 커밋과 관련된 파일까지 함께 확인 

9. 변경 사항 확인하기 
    1) git diff 
        - 작업 트리에 있는 파일과 스페이지에 있는 파일을 비교 
        - 스페이지에 있는 파일과 저장소에 있는 최신 커밋을 비교
        
10. 파일의 상태 변화 정리

    Untracked       unmodified          modified        staged 
      
          =================================================>
                                    스테이징 
                       ======================> 
                             파일수정
                                             ==============>
                                                 스테이징
                       <===================================     
                                    커밋


11. 작업 트리에서 수정한 파일 되돌리기 
    1) git restore 
    2) 수정한 것을 취소하고 가장 최신 버전 상태로 되돌려야 할 때 사용

12. 스테이징 되돌리기  
    1) git restore --staged 
    2) 수정된 파일을 스테이징까지 했을 때 스테이징을 취소하는 방법 
    3) 파일이 아직 스테이지에 올라가기 전(not staged)으로 돌아옴 

13. 최신 커밋 되돌리기 
    1) git reset HEAD^
    2) 수정된 파일을 스테이징하고 커밋까지 했을 때 
       가장 마지막에 한 커밋을 취소하는 방법
    3) 커밋을 취소하고, unstaged 상태로 작업 디렉터리에 보관함         

14. 특정 커밋으로 되돌리기 
    1) git reset 해시
       git reset --hard 복사한 커밋 해쉬 

15. 특정 변경 이력 취소하기 
    0) git revert
    1) 나중에 사용할 것을 대비해서 커밋을 취소하더라도
       커밋했던 기록은 남겨 둠
    2) 변경 사항은 취소하고 커밋은 남겨 두는 경우    
