1. 오류 
    1) 컴파일 오류 (compile error)
    2) 실행 오류 (runtime error)
        - bug 
        - 시스템 오류 (error)
            - 사용 가능한 동적 메모리가 없는 경우 => 프로그램에서 제어가 불가 
        - 예외(exception)
            - 파일 읽어오는 경우, 네트워크 데이터를 전송하려는데 연결이 안된 경우 
            - 배열 값을 출력하려는데 배열 요소가 없는 경우 등 

    3) 로그 (log) 분석을 통해 원인 파악 가능 

2. 오류에 대한 전체 클래스
                 
                                    Throwable
                                        /|\
                                         |
                           ------------------------------                         
                           |                            |
                        Error                     Exception   
                                                    /|\
                                                     |
                                    -------------------------------------------
                                    |                                         |  
                                IOException                            RuntimeException 
                                    |                                         |
                                    |                                         |
                        ------------------------                    ------------------------------
                        |                      |                    |                            |
                FileNotFoundException      SocketException       ArithmeticException        IndexOutofBoundsException

3. 예외 처리하기 
    1) try ~ catch문 

        try {
            // 예외가 발생할 가능성이 있는 코드 작성

        } catch(처리할 예외 타입 e) {
            //try 블록 안에서 예외가 발행 했을 때 예외를 처리하는 부분 
        }     

    2) 컴파일러에 의해 예외가 체크되는 경우 
        - 파일 입출력에서 발생하는 예외처리      

    3) try ~ catch ~ finally 문 
        - 프로그램에서 사용한 리소스는 프로그램이 종료되면 자동으로 해제됨 
        - 그러나 리소스 해제가 안되고 계속 수행되는 서비스의 경우 
          열기만 하고 닫지 않으면 문제가 발생함 
          - 시스템에서 허용하는 자원은 한계가 있기 때문.
          - 그래서 리소스를 종료 해야함.    

        -   try {
                // 예외가 발생할 가능성이 있는 코드 작성

            } catch(처리할 예외 타입 e) {
                //try 블록 안에서 예외가 발행 했을 때 예외를 처리하는 부분 
            } finally {
                //항상 수행되는 부분 
            }                                 

        - try{} 블럭이 수행되는 동안, finally{} 블럭은 항상 수행됨 
        - 각각의 리소스 해제를 finally 블록에서 해제하도록 구현함 

    4) try-with-resouces문 
        - close() 메서드를 명시적 호출하지 않아도 try 블록내에서
          열린 리소스를 자동으로 닫도록 해줌 
          - 리소스를 사용하는 경우 close() 하지 않아도 자동으로 해제 되도록 함 
        - 해당 리소스가 AutoCloseable 인터페이스를 구현해야 함
        - try(A a = new A(); B b = new B()) {

          } catch(Exception e) {

          }
        - 리소스를 try() 내부에서 선언해야 함 
        - close()를 명시적으로 호출하지 않아도
          try {} 블록에서 열린 리소스는 정상적인 경우나 예외가 발생한 경우 
          모두 자동으로 해제됨  
        - 자바 7부터 제공 
        - 자바 9부터 try문의 괄호 안에서 외부에서 선언한 변수를 사용할 수 있게 개선됨 

4. 예외 처리 미루기 
    1) 예외 처리를 미루는 throws 사용      
    2) throws를 이용하면 예외가 발생할 수 있는 부분을 사용하는 문장에서 
       예외를 처리할 수 있음 
    3) 하나의 try {} 블록에서 예외가 여러 개 발생하는 경우   
        - 여러개의 예외가 발생하는 경우 예외를 묶어서 하나의 방법으로 처리할수 있음.
        - 각각의 예외를 따로 처리할 수도 있음.   
            - Exception 클래스를 활용하여 default 처리를 할때
              Exception 블록은 맨 마지막에 위치해야 함 

5. 사용자 정의 예외               
