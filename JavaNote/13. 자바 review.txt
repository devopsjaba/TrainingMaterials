1. 자바 역사
    1) 제임스 고슬링을 필두로 1995년에 개발된 프로그래밍 언어
        - 1991년 Green Project라는 이름으로 프로젝트가 시작
        - 1996년 1월에  JDK 1.0 시작 
    2) 가전 제품 내 탑재하는 프로그램을 만들기 위해 자바가 개발됨

2. 자바 파일과 컴파일 
    1) 소스 코드 작성 (Kosta.java)
    2) 컴파일러가 Kosta.java를 Kosta.class로 변환
        - JVM이 인식할 수 있는 Binary file

3. 자바와 JVM 
    1) JVM = Java Virtual Machine 
        - 자바를 실행하기 위한 가상 머신 
    2) Java 애플리케이션은 JVM 위에서 동작하기 때문에 OS에 종속적이지 않음

4. 자바 특징 
    1) 객체 지향적인 언어 
        - Object 클래스에서 모든 클래스가 파생 
    2) 플랫폼 독립적 
        - JVM 위에서 동작하기 때문에 OS에 종속적이지 않음 
    3) 메모리 관리 
        - Garbage Collector가 존재하기 때문에 
          개발자가 직접 메모리 할당/해제를 해주지 않아도 됨 

5. 자바 코드 구조 
    1) 클래스 블록, 메소드 블록, 명령문으로 구성됨            
    2) 클래스 블록
        - 자바 코드의 가장 바깥쪽 영역을 의미 
        - 클래스명은 자유롭게 정할 수 있음 
        - 클래스명은 소스 파일의 이름과 동일해야 함 
        - 하나의 클래스 블록은 여러 메소드 블록을 포함할 수 있음 
        - 클래스 블록은 중괄호 { }로 감싸져야 함    
    3) 메소드 블록
        - public, private, protected, (default)는 메소드의 접근 제어자 
        - static은 static 메소드를 만들기 위해 사용    
        - void는 해당 메소드 블록이 수행된 후 반환되는 데이터 구조를 의미      
        - 반환되는 데이터 구조는 메소드 당 하나임 
        - 메소드 명 역시 자유롭게 정할 수 있음             
    4) 명령문
        - 메소드가 실행되면 실제로 수행하는 코드 블록 
        - 각 명령문은 세미 콜론 ; 으로 명령문이 끝났다는 것을 의미 

6. 자바 변수와 자료형 
    1) 변수(Variable) = 다양한 값을 대입하여 사용할 수 있음 
        - 변수 = 자료형 + 변수명 
    2) 자료형 
        - Primitive Type (기본 자료형)
            - 데이터를 저장하기 위해 사용하는 자료형 
            - 변수에 "실제 값"을 가짐
            - null 초기화 불가능   
            - 숫자 간 산술 연산 가능
            - == 연산자로 값 비교 가능 
            - byte, short, int, long, char, float, double, boolean, void
        - Reference Type (참조 자료형) 
            - 데이터가 저장된 메모리의 주소값을 가지는 자료형 
            - String (문자열)
            - 배열, 동적 배열(컬렉션)
            - 커스텀하게 생성한 참조 자료형  
            - null 초기화 가능                      
            - 숫자 간 산술 연산 불가능 
            - equals() 메소드를 활용하여 값 비교 
            - Byte, Short, Integer, Long, Character, Float, Double, Void (래퍼클래스)
                - 기본 타입을 래퍼 클래스로 변환하는 과정 => Boxing 
                - 반대를 Unboxing 이라고 함 

7. 코드 스타일 (컨벤션)
    1) CamelCase
        - 각 단어의 맨 처음 글자를 대문자로 표기 
        - lowerCamelCase, UpperCamelCase 로 구분될 수 있음.
        - lowerCamelCase 예
            - helloWorld, myBook (메소드 명)
        - UpperCamelCase 예
            - HelloWorld, MyBook (클래스 명)
    2) snake_case
        - 각 단어를 언더바(_)로 연결
        - 하이픈(-)을 사용할 수도 있음
        - 예
            - hello_world, my_book

8. 주석
    1) 라인 주석, 블록 주석 
    2) 누구나 알 만한 내용의 주석은 지양 
    3) 코드에 따라 주석도 함께 업데이트 필요 
    4) 팀 내 주석에 대한 표준 설정 필요     