1. Thread 
    1) Process 
        - 실행 중인 프로그램 
        - 프로그램이 실행되면 OS로부터 메모리를 할당받아 프로세스 상태가 됨 
    2) Thread
        - 하나의 프로세스는 하나 이상의 thread를 가지게 됨.
        - 실제 작업(task)을 수행하는 단위는 thread임.
    3) Thread 만들기 
        - Thread 클래스 상속하여 만들기         
        - Runnable 인터페이스 구현하여 만들기 

2. Thread status 
                        Run 
                       -------- 
                        thread
                        /|\
                         |
                         |            sleep(시간)
                         |            join()
                         |            wait()
start =============>  Runnable      =============>  Not Runnable                     
                        |            <=============
                        |            sleep(시간) -> 시간지나면
                        |             join() -> other thread exits
                        |             wait() -> notity(), notifyAll()   
                       \|/
                       Dead 

3. Thread 클래스 
    1) Thread.MIN_PRIORITY(1) ~ Thread.MAX_PRIORITY (10)
    2) 디폴트 우선순위 : Thread.NORM_PRIORITY (5)         
    3) 우선 순위가 높은 Thread가 CPU의 배분을 받을 확률이 높음   
    4) setPriority(int newPriority) / getPriority()            

    5) join()
        - 동시에 두 개 이상의 Thread가 실행 될 때
          다른 Thread의 결과를 참조하여 실행해야 하는 경우 join() 메서드를 사용함
        - join() 메서드를 호출한 Thread가 Not Runnable 상태가 됨 
        - 다른 Thread가 수행이 끝나면 Runnable 상태로 돌아옴 

                Thread1                         Thread2 
                  |                                | 
                  |                                |         
                  |          join()                |
                  ---------------------------------|
                                                   |
                                                   |
                                                  \|/ 
                                                  Dead 
                  |
                  |
                 \|/                                                 
                 Dead
    6) Thread 종료하기 
        - 무한 루프의 경우 while(Flag)의 flag 변수값을 false로
          바꾸어 종료 시킴                  

4. Multi-threading 프로그래밍의 동기화 
    1) critical section은 두개 이상의 thread가 동시에 접근하는 경우
       문제가 생길 수 있기 때문에 동시에 접근할 수 없도록 영역처리해 주는 것
    2) 한 순간 오직 하나의 thread가 접근하고, 나머지 thread는 대기(blocking)
       상태가 됨 

    3) 동기화 (synchronization)
        - 두 개의 thread가 같은 객체에 접근 할 경우,
          동시에 접근 함으로써 오류가 발생함.
        - 동기화는 critical section(임계 영역)에 접근할 경우
          공유 자원을 lock하여 다른 thread의 접근을 제어 
        - 동기화를 잘못 구현하여 deadlock에 빠질 수 있음.

    4) 자바에서의 동기화 방법
        - synchronized 블록 
            - 현재 객체 또는 다른 객체를 lock으로 만듦
            - synchronized(참조형 수식) {
                수행문;
              }        
            - synchronized 메서드 
                - 객체의 메서드에 synchronized 키워드 사용 
                - 현재 이 메서드가 속해있는 객체에 lock을 걸음                          

5. wait() / notity(), notifyAll() 메서드 활용한 동기화 프로그래밍 
    1) 리소스가 어떤 조건에서 더 이상 유효하지 않은 경우
       리소스를 기다리기 위해 Thread가 wait() 상태가 됨 
    2) wait() 상태가 된 thread은 notify()가 호출 될 까지 기다림.
    3) 유효한 자원이 생기면 nofity()가 호출되고 
       wait()하고 있는 Thread 중 무작위로 하나의 Thread를 재시작 함.
    4) notifyAll()이 호출되는 경우 wait()하고 있는 모든 Thread가 
       재시작됨.
        - 이 경우 유효한 리소스만큼의 Thread만이 수행될 수 있고 
          자원을 갖지 못한 Thread의 경우는 다시 wait() 상태로 만듦            