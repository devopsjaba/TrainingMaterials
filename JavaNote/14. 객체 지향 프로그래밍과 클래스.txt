1. 객체 
    1) 객체(Object) : 사용할 수 있는 실체 
    2) 생활 속에서 객체 
        - 절차 지향 
            - 아침에 일어남 -> 씻음 -> 밥을 먹음 -> 버스를 탐 -> 요금 냄 -> 협회에 도착 
        - 객체 지향 
            - 
                    훈련생        먹는다          밥               

                     탄다         간다  

                    버스                         협회

2. 클래스 
    0) 클래스 사용 이유 
        - 변수 => 배열 => 클래스 
                        - 다양한 자료형의 데이타를 하나로 묶어 관리할 수 있는
                          구조로서 사용 
    1) 클래스(Class) :  객체를 만들기 위한 설계도, 
                       1개의 정의된 클래스를 이용해 여러 개의 객체를 생성  
        - 훈련생 객체                           Trainee 클래스 
            - 이름 : 박종원                       - traineeName  
            - 사는곳 : 태평                       - traineeAddress  
            - 키 : 173cm                         - traineeHeight  

        - 종류
            - (일반) 클래스
            - 추상 클래스

            - 인터페이스 (interface)


    2) 클래스 문법
        - (접근 제어자) class 클래스 이름 {
               멤버 변수 (field, 속성);
               메서드 (method); 
               생성자 (constructor);
               이너 클래스 (inner class)                
          }           

    3) 클래스 이름 
        - 코딩 컨벤션(coding convension)
            - 클래스 이름 대문자로 시작         

3. 패키지 
    1) 클래스 파일의 묶음 
    2) 패키지를 만들면 프로젝트 하위에 물리적으로 디렉터리가 생성됨 
    3) 계층 구조를 가짐 

4. 메서드 
    1) 함수(function)의 한 종류 
    2) 함수 : 하나의 기능을 수행하는 일련의 코드 

        \ 숫자1, 숫자2 /
     ----             ------
     |                     |
     |      더하기 함수     |
     |----------------    -|
                     /    \
                     숫자의합

    3) 예
        - 두 수를 입력받아 더하는 경우 
        - 가장 좋은 성적 둘을 더하는 경우       ==> 두 수를 더해서 결과 값을 보여준다 
        - 두 거리를 더하는 경우 
    4) 함수의 입력과 반환 
        - num1, num2
            add 함수 
                result = num1 + num2 
                                result 

5. 메서드(함수) 호출과 (콜)스택 메모리 
    1) 스택 
        - 자료가 복사기 용지처럼 쌓이는 자료 구조를 말함 
        - 스택은 마지막에 추가된 자료부터 순서대로 꺼내서 사용할 수 있음
        - LIFO(Last In First Out) 구조 

    2) 함수를 호출하면 그 함수만을 위한 메모리 공간이 할당됨
        - 이 메모리 공간을 스택(stack)이라고 부름 

6. 함수의 장점
    1) 기능을 나누어 코드를 효율적으로 구현할 수 있음 
    2) main() 함수에 너무 긴 코드가 모두 들어 있었음
    3) 하나의 함수에 하나의 기능 구현하기 

7.  메서드 구조 

    접근지정자 (static) 리턴(반환)타입 메서드이름(입력매개변수) {
        // 메서드 내용
    }     
    
                








