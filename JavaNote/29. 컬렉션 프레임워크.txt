0. 자료 구조 (Data Structure)
    1) 대량의 데이터를 효율적으로 관리하는 매커니즘를 자료구조라 함 
        - 우편번호, 학번 
        - 예) 무작위 명단 
                - 무작위로 나열된 명단에서 특정 사람을 찾는 것은 비효율적임
              학년, 반, 번호로 관리 
                - 체계적인 학생 관리를 통해 2학년 2반 30번 홍길동 찾는 경우
                - 효율적으로 찾을 수 있음   
    2) 배열, 리스트, 스택, 큐, 트리 등 
        - 배열
            - 크기가 고정되어 있어 데이터를 추가하거나 삭제할 수 있음 
            - 새로이 배열을 만들고 옮겨야 함 
        - 리스트 
            - 원소가 원소를 가리켜서 관리하는 자료구조임
            - 데이터가 추가되거나 삭제될 때 연결하는 정보만 바꾸면 쉽게 추가,
              삭제 됨.  
        - 스택  
            - 한쪽 끝에서만 자료를 넣거나 뺄수 있는 선형 구조(LIFO)로 되어있음.
            - 자료를 넣는 것을 밀어넣는다하여 푸시(push)라고 하고
            - 반대로 넣어둔 자료를 꺼내는 것을 팝(pop)이라고 함
            - 가장 최근에 푸시한 자료부터 나오게 함
            - 오래된 데이터가 제일 아래에 있음 
        - 큐 
            - 먼저 집어놓은 데이터가 먼저 나오는 FIFO 구조로 저장하는 자료구조 
            - 지하철에 줄을 선 승객들의 행렬과 같은 것임
            - 제일 먼저 쌓인 데이터가 제일 먼저 출력됨 
        - 트리 
            - 부모 노드 밑에 여러 자식 노드가 연결되고,
              자식 노드 각각에 다시 자식 노드가 연결되는 형태의 자료구조 
            - 자식 노드에서 부모 쪽으로 계속해서 타고 올라가다 보면
              결국 부모가 없는 하나의 노드로 이어지게 됨(루트 노드)
            - 루트 노드를 중심으로 뻗어나가는 모습이 나무의 구조와 비슷함                                                                                  

1. 컬렉션(Collection)
    1) 여러 데이터를 수집해 놓은 자료 구조 
    2) 저장 공간 크기가 동적으로 변화함 
    3) 동일한 타입을 묶어 관리하는 자료 구조 

2. 프레임워크 
    1) 클래스와 인터페이스의 묶음(라이브러리)
    2) 클래스 정의에 설계 원칙 또는 구조가 존재 
    3) 리스트, 스택, 큐 등의 자료구조에 정렬, 탐색 등의 알고리즘을
       구현해 놓은 프레임워크 
    4) 자료구조를 개발자가 편리하게 사용할 수 있도록 컬랙션 프레임워크 제공함    

3. 주요 클래스와 인터페이스 
           Interface Iterable<T>
                /|\
                 |
                 |   
            Collection<E>
                - The root interface in the collection hierarchy
                /|\                                 /|\
                 |                                   |                                              Interface Map<K,V>
                 |                                   |                                                  - 키(key)와 값(value)으로 이루어진 데이터들의 집합
        Interface List<E>                       Interface Set<E>                                        - 키는 중복을 허용하지 않음
            - 순서가 있는 데이터 집합               - 데이터의 순서가 유지되지 않음                         - 값은 중복될 수 있음
            - 추가된 데이터의 순서 유지되지          - 중복된 데이터가 제거됨                               - Class HashMap<K,V>
            - 데이터 중복도 허용함                  - 데이터 중복이 허용 되지 않음                          - Class TreeMap<K,V>
            - Class ArrayList<E>                   - Class HashSet<E>                                   - Class Properties
            - Class LinkedList<E>                  - Class TreeSet<E>                                   - 객체는 key-value의 쌍(pair)으로 이루어짐
            - Class Vector<E>                      - 순서와 관계없이 유일한 값 관리 
            - Class Stack<E>                       - 저장된 순서와 출력된 순서는 다를수 있음 
            - 객체를 순서에 따라 저장 


4. List<E> 컬렉션 인터페이스 
    1) 배열과 가장 비슷한 구조 지니고 있는 자료구조
        - 순서가 있는 자료 관리
        - 데이터의 저장 순서가 유지됨 
        - 동일한 데이터의 중복 저장 허용
        - 배열을 이용하여 객체를 저장됨 
    2) ArrayList<E>, Vector<E>, LinkedList<E>
    3) 객체 생성
        - 구현 클래스 생성자로 동적 컬렉션 객체 생성
        - Arrays.asList(T... a) 메서드 이용해 정적 컬렉션 객체 생성   
            - static <T> List<T> asList(T... a)          
    4) 주요 메서드 
        - add(E e) : 객체를 추가함
        - remove(Object o) : 객체가 존재하면 제거함 
        - iterator
        - clear()      

5. Interface Iterator<E>
    1) Collection 요소를 순회 
    2) 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 것 
    3) 순서가 있는 List 인터페이스의 경우는 Iterator를 사용하지 않고 
       get(i) 메서드를 활용할 수 있음.
    4) Set 인터페이스의 경우 get(i) 메서드가 제공되지 않으므로
       Iterator를 이용하여 객체를 순회함 
    5) 메서드 
        - boolean hasNext()             
            - 이후에 요소가 더 있는지를 체크하는 메서드
            - 요소가 있으면 true를 반환
        - E next()            
            - 다음에 있는 요소를 반환 

6. Interface Set<E>
    1) 중복되지 않게 자료를 관리 
        - 멤버의 중복 여부를 체크하기 위해 인스턴스의 동일성을 확인해야 함 
        - 동일성 구현을 위해 필요에 따라 equals()와 hashCode() 메서드를 
          재정의 함 
    2) 저장 순서가 유지되지 않음
    3) 데이터 중복 저장을 허용하지 않음 
    4) 예
        - 아이디 동일한 경우 같은 멤버이므로 
          중복되지 않도록 Member 클래스의 equals()와 hashCode() 메서드를 
          재정의 해야함 

7. Class TreeSet<E> 
    1) 객체의 정렬에 사용하는 컬렉션 클래스 
    2) 정렬하기 위해 이진 탐색 트리(Binary Search Tree, BST)를 사용함 
    3) 이진 탐색 트리
        - 트리 자료구조에서 각 자료가 들어가는 공간을 노드(node)라고 함.
        - 위아래로 연결된 노드의 관계를 '부모-자식 노드(parent-child node)'라고 함.
        - 이진 탐색 트리는 노드에 저장되는 자료의 중복을 허용하지 않고,
          부모가 가지는 자식 노드 수가 2개 이하임 
          - 각 노드의 왼쪽 서브 트리에는 해당 노드의 값보다 작은 값을 지닌
            노드들로 이루어져 있음.
          - 각 노드의 오른쪽 서브 트리에는 해당 노드의 값보다 큰 값을 지닌 
            노드들로 이루어져 있음.
          - 중복된 노드가 없어야 함
          - 왼쪽 서브 트리, 오른쪽 서브 트리 또한 이진 탐색 트리임.  

        - 어떤 기준으로 객체 크기를 비교할 것인지는 프로그래머가 직접
          구현해야 함.
          - interface Comparable<T> 인터페이스를 구현해 줌 
            - public int compareTo(T o); 
                - 인수로 전달된 o가 작다면 양의 정수 반환
                - 인수로 전달된 0가 크다면 음의 정수 반환 
                - 인수로 전달된 0와 같다면 0을 반환      
    4) TreeSet<T>에 저장할 객체들은 모두 Comparable<T> 인터페이스를 
       반드시 구현한 클래스의 객체여야 함.            
       - 그렇지 않으면 예외가 발생함.      
