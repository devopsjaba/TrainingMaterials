1. 인터페이스(interface) 란 ?
    1) 모든 메서드가 추상메서드로 선언됨 (public abstract)
    2) 모든 변수는 상수로 선언됨 (public static final)
    3) 구현 코드가 없는 인터페이스 

2. 문법
    interface 인터페이스 이름 {
        void makeSomething();
        float PI = 3.14F;
    }    

3. 자바 8부터 일부 구현코드가 추가됨
    1) 디폴트 메서드 (default method)
    2) 정적 메서드 (static method)    

4. 인터페이스 정의와 구현(implements)
    1) 클래스 다이어그램에서 인터페이스를 구현하는 것은 점선으로 표시함 
    2) 인터페이스를 구현한 클래스는 인터페이스 형으로 선언한 변수로 
       형 변환 할 수 있음(upcasting)
       - 상속에서의 형 변환과 동일한 의미     
       - 형 변환되는 경우 인터페이스에 선언된 메서드만 사용 가능함 
       - Calc calc2 = new CompleteCalc();

5. 인터페이스가 하는 일 
    1) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
    2) 일종의 클라이언트 코드와의 약속이며 
       클래스나 프로그램이 제공하는 명세(specification)   
    3) 클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 
       이를 구현한 클래스를 사용할 수 있음 
    4) 어떤 객체가 하나의 인터페이스 타입이라는 것은 
       그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임
    5) 인터페이스를 구현한 다양한 객체를 사용함 -- 다형성 
        - 예) JDBC 인터페이스                      

6. 인터페이스의 여러가지 요소 
    1) 상수
        - 모든 변수는 상수로 변환 됨 (public static final)
    2) 추상 메서드 
        - 모든 선언된 메서드는 추상 메서드 (public abstract)
    3) 디폴트 메서드 
        - 기본으로 제공되는 메서드 
        - 인터페이스를 구현한 클래스가 생성되면 그 클래스에서 사용할 기본 기능임 
        - 디폴트 메서드를 선언할 때는 default 예약어를 사용함            
    4) 정적 메서드              
        - 객체 생성과 무관하게 사용할 수 있음 
        - 인터페이스 이름으로 직접 참조하여 사용함 
    5) private 메서드 (java9이후)
        - 인터페이스를 구현한 클래스에서 사용하거나 재정의 할수 없음 
        - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드 
        - default 메서드나 static 메서드에서 사용함     

7. 인터페이스 활용
    1) 한 클래스가 여러 인터페이스를 구현 가능 
    2) 두 인터페이스의 디폴트 메서드가 중복되는 경우 
    3) 인터페이스 상속하기 
        - 인터페이스 간에도 상속이 가능함 
        - 형 상속(type inheritance)
        - 인터페이스는 여러 개를 동시에 상속 받을 수 있음
    4) 인터페이스 구현과 클래스는 상속 함께 쓰기 
            