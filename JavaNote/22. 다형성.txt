1. 다형성(ploymorphism)
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
    2) 같은 코드에서 여러 다른 실행 결과가 나옴 
    3) 정보 은닉, 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나임.
    4) 다형성을 잘 활용하면 유연하고 확장성 있고, 유지보수가 편리한
       프로그램을 만들 수 있음.

2. 클래스간의 관계 정리
    1) IS-A 관계 (inheritance)
        - 일반적(general) 개념과 구체적인(specific) 개념과의 관계 
        - 상위 클래스 : 하위 클래스보다 일반적인 개념 (ex: Employee)
        - 하위 클래스 : 상위 클래스보다 구체적인 개념들이 더해짐 
                        (ex: Engineer, Manager, developer,...)
        - 상속은 클래스간의 결합도가 높은 설계 

    2) HAS-A 관계 (composition)   
        - 클래스가 다른 클래스를 포함하는 관계 (참조변수로 선언)
        - 코드 재사용의 가장 일반적인 방법 
        - 예: Student가 Subject를 포함 , 
              Library를 구현할 때 ArrayList 생성하여 사용   
        - 상속하지 않음     
          