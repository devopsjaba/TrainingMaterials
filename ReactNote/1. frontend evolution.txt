1. MVVM 등장 
    1) 웹 개발의 패러다임 변화 
        - 특정 분야에서 당시 일반적으로 받아들여지는 사고 방식
    2) 웹 개발 진화 과정 
        - DOM, jQuery => MVC => MVVM
    3) MVVM 프레임워크의 시초인 Knockout.js를 통해서 시작됨     

2. 기존 개발 모델 한계점 
    1) MVC 아키텍쳐의 문제점 
        - Controller가 문제 
    2) 분리 필요성 인지 
        - 비지니스 로직을 개발하는 것과 화면 분리 필요함 인지 
            - Model과 View를 분리함 
    3) Model-View 결합 문제 
        - Model과 View를 통해 관심사는 분리했지만 
        - Model-View간의 상호작용을 다루는 Controller가 결국
          둘을 강하게 결합 시킴을 알게됨 
    4) Controller의 복잡성과 영향
        - Controller가 복잡성은 시스템 전반의 의존성과 결합도를 높임
        - 유지보수와 확장성에 어려움 초래됨      

3. 서버 웹 개발 방식의 Controller         
    1) 데이터 + EL를 이용한 템플릿(Template) 방식으로 상대적으로 덜 복잡함 
        - 웹 서버에서는 템플릿에 데이터를 바인딩하여 
          원하는 HTML을 그려내는 방식을 통해 선언적으로 표현함   
    2) 클라이언트에서는 화면의 변화를 그려내기 위해서는 복잡한 DOM 조작을 
        해야했고 => 개발의 복잡성으로 이어짐                     
    3) 직접적인 DOM 조작이 아닌 템플릿 방식으로 변경
        - 훨씬 더 간단하고 선언적으로 화면을 그려낼 수 있음 
        - 예) <button onclick="alert('hello')">클릭하셈</button>        
    4) 클라이언트에서도 DOM을 직접 조작하지 말고 템플릿 방식으로 개발함 
    5) DOM을 이용한 웹 프런트엔드 개발 일반 모델 
        - 선택하기 (Select) : 요소찾기
        - 상호작용 감지 (Event Listener) : 해당 요소에 특정 이벤트 등록
        - 데이터 가공 (Business Logic) : 새로운 데이터를 만들어냄 
        - 화면 변화 (Manipulation) : 데이터를 통해 새로운 HTML 화면 변경함
    6) MVC 아키텍쳐 
              -----------------   -------------------  
              |               \|/ |                 \|/    
            Model           Controller             View
              /|\              |   /|\               |   
               -----------------    ------------------ 
         - Controller가 수동으로 스크립트를 통해서 Model과 View의 상호작용 처리      

4. MVVM 패턴 등장 
    1) Controller 대신 ViewModel(=템플릿)을 사용하는 것 
    2) 직접 DOM을 컨트롤하는 대신 Template에 ViewModel을 전달하여 
       View를 그림.  
    3) M -> V : 데이터 변경에 따른 화면 변화 
       V -> M : 사용자 이벤트에 따른 모델 변화 
    4) 자주 쓰이는 패턴을 미리 만들어 필요한 것만 자동화 
    5) 스크립트(Controller)로 작성하지 않고 템플릿(ViewModel)으로 작성함 
        - 코드가 간결, 이해가 쉬워짐, 직관적인 코드 작성  
    6) 예)
        <button 클릭하면="좋아요+1해서()">
            {likes를 출력} likes
        </button>                       
    7) MVVM 아키텍쳐                      Binding  
              -----------------   -------------------  
              |               \|/ |                 \|/    
            Model           ViewModel               View
              /|\              |   /|\               |   
               -----------------    ------------------       
        - ViewModel을 템플릿을 통해 선언적으로 작성하면 
          Model과 View의 상호작용을 자동으로 처리함   
            - 선언적 데이터 바이딩 (Data-Binding)    
        - 자동으로 화면이 그려지도록(Rendering)하는 방식 
    8) MVVM의 개발 모델 
        - 화면작성 : HTML로 화면 만들기 (버튼)
        - 데이터 바인딩 (Model과 Event) 
            : HTML에서 변경되거나 상호작용이 필요한 곳에 data-bind와 지시어 작성
        - 데이터 가공 (Business Logic) : 새로운 데이터를 만들어냄
        - 화면 변화 (Manipulation) : 자동화, 선언된대로 상호작용에 따라 변화함
    9) MVVM 기반 개발 사고방식 변화 
        - 데이터를 작성, 알아서 그리도록 선언적으로 작성함 
        - 선언적인 UI 개발 방식 
        - 화면변화를 템플릿를 통해 위임함 
        - 결국 데이터의 변경을 통해 화면을 제어할 수 있게 됨        

5. MVVM, 그리고 컴포넌트 
    1) 화면과 기능의 결합 그리고 재활용과 모듈화 
    2) 컴포넌트 기반 개발 등장    
        - 재사용이 가능한 블록을 만들어 조립해서 개발              
    3) UI를 선언적으로 개발할 수 있는 MVVM 패턴을 통해 
       프런트엔드 개발이 훨씬 더 간단해지고 그 규모가 커짐.
    4) 버튼이나 카드 등의 반복적으로 사용되는 행태가 자주 나타남 
    5) 특정 화면과 기능이 결합되어 반복적으로 등장하는 UI 형태를 재사용하는
       요구가 생겨남 
    6) 화면과 기능이 결합된 재사용 가능한 UI 코드 = 컴포넌트       
    7) MVVM + 컴포넌트 = 웹 프레임워크    
    8) 현대적 웹 프레임워크의 정립 
        - MVVM 패턴
            - 화면(View)과 데이터(Modle)의 분리 
            - 템플릿과 데이터의 변화을 통해 화면을 제어 
                - 데이터 처리만 개발하고 랜더링은 템플릿에게 위임함 
                - UI의 선언적 개발이 가능해짐 
                - 복잡한 동적 UI를 쉽게 구현할수 있음 
        - 컴포넌트 기반
            - 화면과 기능이 결합된 반복되는 UI 조각
            - 효율적인 UI 관리와 재사용이 가능해짐 
        - SPA (Single Page Application)
            - 웹 페이지에서 본격적인 웹 애플리케이션 
            - Ajax의 등장으로 새로고침 없이 일부만 업데이트하는 동적 웹 페이지라는
              새로운 개념 탄생 (2000년도)
            - 새로고침 없이 하나의 페이지에서 애플리케이션처럼 동작하는 방식인
              SPA가 제공 (개발하기 어려움) ==> MVVM 패턴 등장으로 복잡한 SPA 개발이
              쉬워짐 ==> 본격적인 SPA 서비스 개발의 대중화  
        - 모듈화와 빌드 도구 
            - SPA의 복잡성과 코드 관리 문제 
            - 모듈 분할과 효율적 관리 
            - 모듈화와 빌드 도구의 중요성 대두 => 대규모 애플리케이션 성능 및
              유지보수를 획기적으로 개선함    

    