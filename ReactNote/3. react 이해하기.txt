1.  현대 프레임워크 핵심요소 
    1) 화면과 데이터의 분리 그리고 렌더링 
        - 데이터의 변경사항을 감지하여 자동으로 화면으로 그려주기 위한 독자적인 방법들 고안해냄 
    2) React의 1)에 대한 기법들 
        - JSX 
            - JavaScript에 HTML을 결합한 템플릿 
        - Virtual DOM 
            - JSX를 통해 실제 DOM이 아닌 가상 DOM 데이터 구조를 만들어냄 
        - JSX와 Virtual DOM 그리고 re-rendering 
            - 데이터의 변경을 감지하고, JSX로 새로운 가상 DOM을 생성하여 
              기존의 가상 DOM과 비교함.
            - 변경된 부분만 실제 DOM에 반영함으로써,
              불필요한 DOM 조작을 줄여 성능을 최적화하는 방식     
        - 컴포넌트 기반 아키텍쳐 
            - React는 화면과 데이터의 분리라는 개념을 공유하면서도,
              데이터 관리와 UI 업데이트를 합친 컴포넌트 중심 접근 방식 제시함 

2. 리액트 컴포넌트 (React Component)
    1) html에서 화면을 구성하는 요소로도 볼수 있음 (버튼, 링ㅋ, 이미지 등)
    2) 이미 작성한 컴포넌트를 재사용 => 개발 속도 빠라짐, 유지보수 유리함 
    3) 컴포넌트는 JavaScript 파일내의 하나의 함수로 작성하거나 
       JavaScript 파일 자체로도 작성할 수 있음.

    4) 컴포넌트 활용하기
        - App.jsx에 작성된 내용도 하나의 컴포넌트임 
            - return() 내에 출력할 내용을 작성 
                - 하나의 태그로 감싸야 함 
                - <div></div> 태그도 사용 가능
                - <> </> 태그를 주로 사용함    
                    - Fragment라고 함 
                    - HTML 트리 구조에서 흔적을 남기지 않고 그룹화 해줌     

        - 컴포넌트 작성 (JSX 파일)
            - JSX는 리액트에서 사용하는 파일
                - JavaScript 코드 안에 HTML과 유사한 코드를 작성할 수 있게 해줌 
                - 리액트 컴포넌트를 정의하고 UI를 구성하는데 매우 유용함 
                - 브라우저에서 직접 실행되지 않으며, Babel이나 Vite와 같은 변환기를 통해
                  JavaScript로 변환 후 실행됨 
                - 리액트 자체 빌드도구 덕분에 *.js, *.jsx로 작성해도 아무 문제 없이 실행됨 
                - JSX 문법
                    - { JS표현식 }
                    - 중괄호 {}를 사용하여 JavaScript 표현식을 JSX안에 포함할 수 있음.

        - 컴포넌트 생성
            - src 폴더 내에 Component1.jsx 파일 생성 

        - 컴포넌트 적용 
            - App.jsx에서 Component1.jsx import     

        - 컴포넌트에 함수가 2개 이상인 경우
            - 하나의 함수에 default 적용하는 경우
                - default를 작성한 함수는 { }로 import를 하지 않음                                           
                       
    5) JSX 파일 내에서 JavaScript 변수 사용 
        - Component3.jsx에 함수 내에 변수 선언하기                        

3. Props
    1) properties 약자 
    2) 부모 컴포넌트에서 자식 컴포넌트로 전달되는 데이터(객체,배열)나 함수 
    3) 컴포넌트 간의 데이터를 전달하기 위해 사용되는 리액트 객체 
    4) Props 사용하기 
        - props 전달 
            - Child.jsx에서 props를 받기 위해 함수 수정 
                - 부모로부터 전달받은 props를 직접 받으려면 {} 안에 속성 이름 작성함 
                - props를 전달받는 경우 
                    - props.속성이름 행태로 값 사용함 
            - App.jsx에서 보내는 문법
                - import 한 컴포넌트 태그 내에 속성이름=값 형태로 작성하여 전달 

        - 여러 개의 값 전달 
            - Child2.jsx
                - 중괄호 안에 전달받는 속성 이름을 콤마(,)로 구분하여 나열    
                - props를 전달받는 경우 
            - App.jsx에서 보내는 문법   
                - 숫자를 보내는 경우 {} 안에 작성       

        - JavaScript Object를 포함하여 여러 개 값 전달 
            - Child3.jsx
                - 중괄호 안에 전달받는 속성 이름을 콤마(,)로 구분하여 나열    
                - props를 전달받는 경우                                                
