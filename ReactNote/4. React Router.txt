1. 라우팅 
    1) URL
        - 'L'은 위치 제공자 (location) 
        - 원하는 자원을 얻으려면 자원이 있는 경로와 쿼리 매개변수 등을 조합하여 웹 서버로 요청 
        - 웹 서버에서 URL에 명시된 자원을 찾는 과정을 라우팅(routing)이라고 함 

    2) 보통 웹에서 라우팅은 항상 서버에서 일어남 
        - server-side routing                 
    3) 웹브라우저에서 발생하는 라우팅 
        - client-side routing
        - location, history 객체 기능으로 일어남   

2. SPA 방식 특징 
    1) 다중 페이지 앱 (MPA, multi page application)        
        - 웹서버와 웹브라우가 여러 HTML 파일 주고 받는 방식  
    2) 단일 페이지 앱 (SPA, single page application)
        - 라우팅이 웹 브라우저에서만 일어나는 웹 방식     
    
    3) SPA 방식 웹 앱
        - 클라이언트 측 라우팅(CSR)은 수많은 컴포넌트 중 특정 컴포넌트를 찾아 화면에 보여줌.
        - CSR은 프로그래밍은 URL을 입력하지만 실제 서버에 전송하는 URL이 아니므로 
          사용자가 보고 있는 컴포넌트가 바뀌어도 화면 새로 고침(refresh)이 발생하지 않음  

3. 리액트 라우터 (패키지)
    1) CSR 패키지 
    2) 리액트 훅 기술에 기반을 둠 
    3) BrowserRouter -- 최상위 컴포넌트       

4. 하위컴포넌트 생성 
    1) / 주소요청에 Home,
       /info 주소요청에 Info 컴포넌트를 화면에 렌더링 

        - 리액트 컴포넌트 작성시 아래 모두 사용 가능
            function 함수이름() {}                   

            const 함수 이름 = () => {}
                - 최근 더 많이 사용하는 방식으로 고려됨 

5. App.jsx 작성 및 실행 
    1) <BrowserRouter>
        - 애플리케이션 최상위에서 라우팅 관리 
        - Routes, Route, Link 등을 모두 감싸고 있어야 함 
    2) Link 컴포넌트 
        - HTML에서 다른 웹 사이트로 이동하거나 특정 경로의 내용을 보내면 
          <a href="다른 사이트 url"></a> 요소를 사용함
        - <a> 요소는 클라이언트 측 라우팅을 위한 용도로는 바로 사용못함 
        - 리액트 라우터는 <a> 요소를 감싼 Link 컴포넌트를 제공함 
            - import { Link } from 'react-router-dom'  
            - to 속성 제공 
    3) <Route>
        - 페이지를 새로고침하지 않고 URL 변경        
        - path, element 속성 제공 
            - 00이름의 컴포넌트를 화면에 보이게 설정(라우팅) 

6. Header 컴포넌트에 분리 적용
    1) Link 부분을 Header 컴포넌트에 작성하여 분리           
